{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Rusty Bargain App Documentation","text":""},{"location":"#overview","title":"Overview","text":"<p>The Rusty Bargain App is a full-stack application designed to assist users in managing a vehicle database and predicting vehicle prices using machine learning models. This application is ideal for businesses and users who want to maintain a structured database and perform predictive analytics for vehicle pricing.</p>"},{"location":"#features","title":"Features","text":"<ol> <li>Vehicle Database Management:</li> <li>View, add, update, and delete vehicle records.</li> <li> <p>Use an interactive frontend to filter, sort, and search for vehicles.</p> </li> <li> <p>Machine Learning (ML) Model:</p> </li> <li>Train or retrain the model using updated data.</li> <li>Predict vehicle prices based on input features such as mileage, horsepower, brand, and fuel type.</li> </ol>"},{"location":"#application-architecture","title":"Application Architecture","text":"<p>The Rusty Bargain App is divided into two main components:</p>"},{"location":"#backend","title":"Backend:","text":"<ul> <li>Built with FastAPI, the backend handles all API endpoints, machine learning workflows, and database interactions.</li> <li>Includes modules for:</li> <li>Data preprocessing.</li> <li>ML model training and predictions.</li> <li>Database operations via PostgreSQL.</li> </ul>"},{"location":"#frontend","title":"Frontend:","text":"<ul> <li>Built with Streamlit, the frontend provides an interactive interface for users to interact with the backend services.</li> <li>Features include:</li> <li>Viewing and managing vehicle records.</li> <li>Initiating model training and predictions.</li> </ul>"},{"location":"#project-structure","title":"Project Structure","text":""},{"location":"#key-backend-files","title":"Key Backend Files","text":"<ul> <li> <p><code>router.py</code>:   Defines API routes for various functionalities like preprocessing data, training models, and making predictions.</p> </li> <li> <p><code>controller.py</code>:   Implements core business logic to process API requests and manage database and ML workflows.</p> </li> <li> <p><code>models.py</code>:   Defines the database schema using SQLAlchemy models, representing entities like vehicles.</p> </li> <li> <p><code>schemas.py</code>:   Specifies data validation and serialization schemas using Pydantic.</p> </li> <li> <p><code>ELT.py</code>:   Handles Extract, Load, Transform (ELT) processes to prepare data for analysis and modeling.</p> </li> <li> <p><code>preprocessing.py</code>:   Contains functions for data cleaning and preparation, such as handling missing values and feature engineering.</p> </li> <li> <p><code>main.py</code>:   Entry point for the FastAPI backend application. Configures API routes, middleware, and dependencies.</p> </li> </ul>"},{"location":"#key-frontend-file","title":"Key Frontend File","text":"<ul> <li><code>app.py</code>:   Implements the Streamlit application. Provides a user interface for managing the database and interacting with the ML model.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python (&gt;=3.11)</li> <li>Docker and Docker Compose</li> </ul>"},{"location":"#installation","title":"Installation","text":"<ol> <li> <p>Clone the Repository:    <pre><code>git clone https://github.com/realdanizilla/Rusty-Bargain-App.git\ncd Rusty-Bargain-App\n</code></pre></p> </li> <li> <p>Set Up Environment Variables:    Create a <code>.env</code> file in the root directory with the following:    <pre><code>POSTGRES_USER=your_username\nPOSTGRES_PASSWORD=your_password\nPOSTGRES_DB=your_database\nLOGFIRE_TOKEN=your_token\n</code></pre></p> </li> <li> <p>Build and Start Docker Containers:    <pre><code>docker-compose up --build\n</code></pre></p> </li> </ol>"},{"location":"#accessing-the-application","title":"Accessing the Application","text":"<ol> <li> <p>Frontend:    Visit <code>http://localhost:8501</code> to interact with the Streamlit app.</p> </li> <li> <p>Backend:    Access API documentation at <code>http://localhost:8000/docs</code>.</p> </li> </ol>"},{"location":"#usage","title":"Usage","text":""},{"location":"#vehicle-database-management","title":"Vehicle Database Management","text":"<ul> <li>Use the Streamlit interface to:</li> <li>View all vehicle records.</li> <li>Add new vehicles.</li> <li>Update or delete existing records.</li> </ul>"},{"location":"#machine-learning-workflow","title":"Machine Learning Workflow","text":"<ul> <li>Train or retrain the model using updated data.</li> <li>Predict vehicle prices based on user-provided features.</li> </ul>"},{"location":"#key-functionalities","title":"Key Functionalities","text":"<ol> <li>Train/Re-train Model:</li> <li>Accessible from the frontend under \"Train/Re-train Model.\"</li> <li> <p>Processes raw data, loads it into the database, trains the model, and makes it available for predictions.</p> </li> <li> <p>Price Prediction:</p> </li> <li>Accessible via a frontend form.</li> <li>Users provide features like vehicle type, mileage, and horsepower, and the app predicts the price.</li> </ol>"},{"location":"#example-workflow","title":"Example Workflow","text":"<ol> <li>Start the Application:</li> <li> <p>Run <code>docker-compose up</code> and access the frontend and backend services.</p> </li> <li> <p>Manage Vehicles:</p> </li> <li> <p>Add or update vehicle records in the database.</p> </li> <li> <p>Train the ML Model:</p> </li> <li> <p>Use the \"Train/Re-train Model\" button in the Streamlit app.</p> </li> <li> <p>Predict Prices:</p> </li> <li>Enter vehicle details in the \"Predict Price\" form and get an instant price prediction.</li> </ol>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Follow these steps: 1. Fork the repository. 2. Create a new branch for your feature or bug fix. 3. Submit a pull request with detailed information about your changes.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for more details.</p> <p>This documentation provides a clear and concise overview of the Rusty Bargain App for both users and developers. If you encounter any issues, please open an issue on the GitHub repository. \ud83d\ude80</p>"},{"location":"api/","title":"API","text":"<p>Here is the revised and detailed documentation for the Rusty Bargain App API, including the endpoints for CRUD operations.</p>"},{"location":"api/#rusty-bargain-app-api-documentation","title":"Rusty Bargain App API Documentation","text":""},{"location":"api/#overview","title":"Overview","text":"<p>The Rusty Bargain App provides a comprehensive RESTful API for managing vehicle data and running machine learning workflows for price prediction. The API is built using FastAPI and provides endpoints for:</p> <ul> <li>CRUD operations: Manage vehicle records.</li> <li>Data preprocessing: Prepare data for analysis and modeling.</li> <li>Machine learning workflows: Train, retrain, and predict vehicle prices.</li> </ul> <p>You can explore and test all API endpoints using the interactive documentation at http://localhost:8000/docs.</p>"},{"location":"api/#api-endpoints","title":"API Endpoints","text":""},{"location":"api/#crud-operations","title":"CRUD Operations","text":""},{"location":"api/#1-get-all-vehicles","title":"1. Get All Vehicles","text":"<ul> <li>Endpoint: <code>/vehicles/</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieve a list of all vehicle records.</li> <li>Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Body: A list of vehicle objects. <pre><code>[\n  {\n    \"id\": 1,\n    \"datecrawled\": \"2025-01-02T00:04:26.076Z\",\n    \"price\": 3500,\n    \"vehicletype\": \"sedan\",\n    \"gearbox\": \"manual\",\n    ...\n  }\n]\n</code></pre></li> </ul> </li> </ul>"},{"location":"api/#2-get-a-single-vehicle","title":"2. Get a Single Vehicle","text":"<ul> <li>Endpoint: <code>/vehicles/{vehicle_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieve details of a specific vehicle by its ID.</li> <li>Path Parameter:<ul> <li><code>vehicle_id</code> (integer): The ID of the vehicle to retrieve.</li> </ul> </li> <li>Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Body: A single vehicle object.</li> </ul> </li> </ul>"},{"location":"api/#3-add-a-new-vehicle","title":"3. Add a New Vehicle","text":"<ul> <li>Endpoint: <code>/vehicles/</code></li> <li>Method: <code>POST</code></li> <li>Description: Add a new vehicle record to the database.</li> <li>Request Body:<ul> <li>JSON object representing the vehicle details.   <pre><code>{\n  \"datecrawled\": \"2025-01-02T00:04:26.076Z\",\n  \"price\": 4500,\n  \"vehicletype\": \"SUV\",\n  ...\n}\n</code></pre></li> </ul> </li> <li>Response:<ul> <li>Status Code: <code>201 Created</code></li> <li>Body: The created vehicle object.</li> </ul> </li> </ul>"},{"location":"api/#4-update-a-vehicle","title":"4. Update a Vehicle","text":"<ul> <li>Endpoint: <code>/vehicles/{vehicle_id}</code></li> <li>Method: <code>PUT</code></li> <li>Description: Update details of an existing vehicle.</li> <li>Path Parameter:<ul> <li><code>vehicle_id</code> (integer): The ID of the vehicle to update.</li> </ul> </li> <li>Request Body:<ul> <li>JSON object with the updated vehicle details.   <pre><code>{\n  \"price\": 4800,\n  \"vehicletype\": \"sedan\",\n  ...\n}\n</code></pre></li> </ul> </li> <li>Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Body: The updated vehicle object.</li> </ul> </li> </ul>"},{"location":"api/#5-delete-a-vehicle","title":"5. Delete a Vehicle","text":"<ul> <li>Endpoint: <code>/vehicles/{vehicle_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Remove a vehicle record from the database.</li> <li>Path Parameter:<ul> <li><code>vehicle_id</code> (integer): The ID of the vehicle to delete.</li> </ul> </li> <li>Response:<ul> <li>Status Code: <code>200 OK</code></li> </ul> </li> </ul>"},{"location":"api/#data-preprocessing","title":"Data Preprocessing","text":""},{"location":"api/#preprocess-data","title":"Preprocess Data","text":"<ul> <li>Endpoint: <code>/preprocessdata</code></li> <li>Method: <code>GET</code></li> <li>Description: Preprocess raw vehicle data to prepare it for analysis.</li> <li>Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Body:   <pre><code>{\n  \"Message\": \"Data preprocessed successfully\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"api/#machine-learning-workflows","title":"Machine Learning Workflows","text":""},{"location":"api/#1-train-model","title":"1. Train Model","text":"<ul> <li>Endpoint: <code>/train_model</code></li> <li>Method: <code>GET</code></li> <li>Description: Train a machine learning model using preprocessed data.</li> <li>Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Body:   <pre><code>{\n  \"Message\": \"Model trained successfully\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"api/#2-load-model","title":"2. Load Model","text":"<ul> <li>Endpoint: <code>/load_model</code></li> <li>Method: <code>GET</code></li> <li>Description: Load the trained machine learning model for use.</li> <li>Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Body:   <pre><code>{\n  \"Message\": \"Model loaded successfully\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"api/#3-predict-price","title":"3. Predict Price","text":"<ul> <li>Endpoint: <code>/predict_price/</code></li> <li>Method: <code>POST</code></li> <li>Description: Predict vehicle prices based on the provided input features.</li> <li>Request Body:<ul> <li>A list of JSON objects, each representing a vehicle's features.   <pre><code>[\n  {\n    \"datecrawled\": \"2025-01-02T00:04:26.076Z\",\n    \"vehicletype\": \"SUV\",\n    \"gearbox\": \"automatic\",\n    ...\n  }\n]\n</code></pre></li> </ul> </li> <li>Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Body:   <pre><code>{\n  \"Message\": \"Price predicted\",\n  \"Price prediction\": [3561.33, 4200.50]\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"api/#interactive-api-documentation","title":"Interactive API Documentation","text":"<p>You can test and explore the API endpoints using the Swagger-based interactive documentation available at: - URL: http://localhost:8000/docs</p>"},{"location":"api/#features","title":"Features:","text":"<ul> <li>Explore Endpoints: View all available API routes and their details.</li> <li>Test APIs: Send requests directly from your browser.</li> <li>View Schemas: Understand the structure of request and response bodies.</li> </ul>"},{"location":"api/#error-handling","title":"Error Handling","text":"<ul> <li>400 Bad Request: Invalid input or missing fields.</li> <li>404 Not Found: Resource not found (e.g., invalid <code>vehicle_id</code>).</li> <li>500 Internal Server Error: Unexpected server-side error.</li> </ul>"},{"location":"api/#security","title":"Security","text":"<p>Currently, the API does not include authentication. Before deploying to production, consider implementing security mechanisms such as API keys or OAuth.</p> <p>This documentation provides a detailed overview of the Rusty Bargain App API. For more information, refer to the source code or test the endpoints using the interactive documentation. \ud83d\ude80</p>"}]}