{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Rusty Bargain App Documentation","text":""},{"location":"#overview","title":"Overview","text":"<p>The Rusty Bargain App is a full-stack application designed to assist users in managing a vehicle database and predicting vehicle prices using machine learning models. This application is ideal for businesses and users who want to maintain a structured database and perform predictive analytics for vehicle pricing.</p>"},{"location":"#features","title":"Features","text":"<ol> <li> <p>Vehicle Database Management:</p> <ul> <li>View, add, update, and delete vehicle records.</li> <li>Use an interactive frontend to filter, sort, and search for vehicles.</li> </ul> </li> <li> <p>Machine Learning (ML) Model:</p> <ul> <li>Train or retrain the model using updated data.</li> <li>Predict vehicle prices based on input features such as mileage, horsepower, brand, and fuel type.</li> </ul> </li> </ol>"},{"location":"#application-architecture","title":"Application Architecture","text":"<p>The Rusty Bargain App is divided into two main components:</p>"},{"location":"#backend","title":"Backend:","text":"<ul> <li>Built with FastAPI, the backend handles all API endpoints, machine learning workflows, and database interactions.</li> <li>Includes modules for:</li> <li>Data preprocessing.</li> <li>ML model training and predictions.</li> <li>Database operations via PostgreSQL.</li> </ul>"},{"location":"#frontend","title":"Frontend:","text":"<ul> <li>Built with Streamlit, the frontend provides an interactive interface for users to interact with the backend services.</li> <li>Features include:</li> <li>Viewing and managing vehicle records.</li> <li>Initiating model training and predictions.</li> </ul>"},{"location":"#application-flow","title":"Application Flow","text":""},{"location":"#flowchart-lr-subgraph-etlrusty-bargain-app-abase-vehicle-dataset-bextract-extract_from_csv-bextract-extract_from_csv-ccreate-bronze-table-on-postgres-database-and-seed-it-with-350k-vehicle-records-ccreate-bronze-table-on-postgres-database-and-seed-it-with-350k-vehicle-records-dcrud-operations-create-read-update-delete-vehicles-from-database-dcrud-operations-create-read-update-delete-vehicles-from-database-etransformpreprocess-database-using-ml-pipeline-etransformpreprocess-database-using-ml-pipeline-fload-create-gold-table-on-postgres-database-fload-create-gold-table-on-postgres-database-trainre-train-ml-model-ggenerate-price-prediction-end","title":"<pre><code>flowchart LR\nsubgraph ETL[Rusty Bargain App]\n    A(Base vehicle dataset) --&gt; B[Extract: extract_from_csv]\n    B[Extract: extract_from_csv] --&gt; C[Create bronze table on postgres database and seed it with 350k vehicle records]\n    C[Create bronze table on postgres database and seed it with 350k vehicle records] --&gt; D[CRUD Operations Create, Read, Update Delete vehicles from database]\n    D[CRUD Operations Create, Read, Update Delete vehicles from database] --&gt; E[Transform:Preprocess database using ML pipeline] \n    E[Transform:Preprocess database using ML pipeline] --&gt; F[Load: Create gold table on postgres database]\n    F[Load: Create gold table on postgres database] --&gt; |Train/Re-train ML Model| G(Generate Price Prediction)\n\n\nend</code></pre>","text":""},{"location":"#project-structure","title":"Project Structure","text":""},{"location":"#key-backend-files","title":"Key Backend Files","text":"<ul> <li> <p><code>router.py</code>:   Defines API routes for various functionalities like preprocessing data, training models, and making predictions.</p> </li> <li> <p><code>controller.py</code>:   Implements core business logic to process API requests and manage database and ML workflows.</p> </li> <li> <p><code>models.py</code>:   Defines the database schema using SQLAlchemy models, representing entities like vehicles.</p> </li> <li> <p><code>schemas.py</code>:   Specifies data validation and serialization schemas using Pydantic.</p> </li> <li> <p><code>ELT.py</code>:   Handles Extract, Load, Transform (ELT) processes to prepare data for analysis and modeling.</p> </li> <li> <p><code>preprocessing.py</code>:   Contains functions for data cleaning and preparation, such as handling missing values and feature engineering.</p> </li> <li> <p><code>main.py</code>:   Entry point for the FastAPI backend application. Configures API routes, middleware, and dependencies.</p> </li> </ul>"},{"location":"#key-frontend-file","title":"Key Frontend File","text":"<ul> <li><code>app.py</code>:   Implements the Streamlit application. Provides a user interface for managing the database and interacting with the ML model.</li> </ul>"},{"location":"#functions","title":"Functions","text":""},{"location":"#api-functions","title":"API Functions","text":"<ul> <li>read_root() </li> </ul> <p>Returns standard message to check if API is working</p> <p>Returns:</p> Name Type Description <code>Message</code> <code>dict</code> <p>A dictionary with a message key</p> Source code in <code>backend\\api\\router.py</code> <pre><code>@router.get(\"/\")\ndef read_root()-&gt; dict:\n    \"\"\" Returns standard message to check if API is working\n\n    Returns:\n        Message: A dictionary with a message key\n    \"\"\"\n    return {\"message\": \"Welcome to the Car Price Prediction API\"}\n</code></pre> <ul> <li>create_vehicle_endpoint() </li> </ul> <p>Creates a new vehicle</p> <p>Parameters:</p> Name Type Description Default <code>vehicle</code> <code>VehicleCreate</code> <p>The vehicle to be created</p> required <code>db</code> <code>Session</code> <p>Database connection session. Defaults to Depends(get_db).</p> <code>Depends(get_db)</code> <p>Returns:</p> Name Type Description <code>new_vehicle_data</code> <code>dict</code> <p>A dictionary with key-value pairs with information for the created vehicle</p> Source code in <code>backend\\api\\router.py</code> <pre><code>@router.post(\"/vehicles/\", response_model=VehicleResponse)\ndef create_vehicle_endpoint(vehicle: VehicleCreate, db: Session = Depends(get_db))-&gt; dict:\n    \"\"\"Creates a new vehicle\n\n    Args:\n        vehicle (VehicleCreate): The vehicle to be created\n        db (Session, optional): Database connection session. Defaults to Depends(get_db).\n\n    Returns:\n        new_vehicle_data: A dictionary with key-value pairs with information for the created vehicle\n    \"\"\"\n    return create_vehicle(db, vehicle)\n</code></pre> <ul> <li>read_vehicles_endpoint() </li> </ul> <p>Retrieves all vehicles</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>Database connection session. Defaults to Depends(get_db).</p> <code>Depends(get_db)</code> <p>Returns:</p> Name Type Description <code>vehicles_data</code> <code>list[dict[str, Any]]</code> <p>A list of dictionaries with key-value pairs with information for all vehicles</p> Source code in <code>backend\\api\\router.py</code> <pre><code>@router.get(\"/vehicles/\", response_model=List[VehicleResponse])\ndef read_vehicles_endpoint(db: Session = Depends(get_db))-&gt;list[dict[str, Any]]:\n    \"\"\"Retrieves all vehicles\n\n    Args:\n        db (Session, optional): Database connection session. Defaults to Depends(get_db).\n\n    Returns:\n        vehicles_data: A list of dictionaries with key-value pairs with information for all vehicles\n    \"\"\"\n    vehicles = get_vehicles(db)\n    return vehicles\n</code></pre> <ul> <li>read_vehicle_endpoint() </li> </ul> <p>Retrieves a specific vehicle</p> <p>Parameters:</p> Name Type Description Default <code>vehicle_id</code> <code>int</code> <p>The id of the vehicle to be retrieved</p> required <code>db</code> <code>Session</code> <p>Database connection session. Defaults to Depends(get_db).</p> <code>Depends(get_db)</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>If the vehicle is not found</p> <p>Returns:</p> Name Type Description <code>vehicle_data</code> <code>dict</code> <p>A dictionary with key-value pairs with information for the selected vehicle</p> Source code in <code>backend\\api\\router.py</code> <pre><code>@router.get(\"/vehicles/{vehicle_id}\", response_model=VehicleResponse)\ndef read_vehicle_endpoint(vehicle_id: int, db: Session = Depends(get_db))-&gt;dict:\n    \"\"\"Retrieves a specific vehicle\n\n    Args:\n        vehicle_id (int): The id of the vehicle to be retrieved\n        db (Session, optional): Database connection session. Defaults to Depends(get_db).\n\n    Raises:\n        HTTPException: If the vehicle is not found\n\n    Returns:\n        vehicle_data: A dictionary with key-value pairs with information for the selected vehicle\n    \"\"\"\n    db_vehicle = get_vehicle(db, vehicle_id=vehicle_id)\n    if db_vehicle is None:\n        raise HTTPException(status_code=404, detail=\"Vehicle not found\")\n    return db_vehicle\n</code></pre> <ul> <li>update_vehicle_endpoint() </li> </ul> <p>Updates a vehicle</p> <p>Parameters:</p> Name Type Description Default <code>vehicle_id</code> <code>int</code> <p>The id of the vehicle to be updated</p> required <code>vehicle</code> <code>VehicleUpdate</code> <p>The new data for the vehicle according to the VehicleUpdate schema</p> required <code>db</code> <code>Session</code> <p>Database connection session. Defaults to Depends(get_db).</p> <code>Depends(get_db)</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>If the vehicle is not found</p> <p>Returns:</p> Name Type Description <code>updated_vehicle_data</code> <code>dict</code> <p>A dictionary with key-value pairs with information on the updated vehicle</p> Source code in <code>backend\\api\\router.py</code> <pre><code>@router.put(\"/vehicles/{vehicle_id}\", response_model=VehicleResponse)\ndef update_vehicle_endpoint(\n    vehicle_id: int, vehicle: VehicleUpdate, db: Session = Depends(get_db)\n)-&gt;dict:\n    \"\"\"Updates a vehicle\n\n    Args:\n        vehicle_id (int): The id of the vehicle to be updated\n        vehicle (VehicleUpdate): The new data for the vehicle according to the VehicleUpdate schema\n        db (Session, optional): Database connection session. Defaults to Depends(get_db).\n\n    Raises:\n        HTTPException: If the vehicle is not found\n\n    Returns:\n        updated_vehicle_data: A dictionary with key-value pairs with information on the updated vehicle\n    \"\"\"\n    db_vehicle = update_vehicle(db, vehicle_id=vehicle_id, vehicle=vehicle)\n    if db_vehicle is None:\n        raise HTTPException(status_code=404, detail=\"Vehicle not found\")\n    return db_vehicle\n</code></pre> <ul> <li>delete_vehicle_endpoint() </li> </ul> <p>Deletes a vehicle</p> <p>Parameters:</p> Name Type Description Default <code>vehicle_id</code> <code>int</code> <p>The id of the vehicle to be deleted</p> required <code>db</code> <code>Session</code> <p>Database connection session. Defaults to Depends(get_db).</p> <code>Depends(get_db)</code> <p>Raises:</p> Type Description <code>HTTPException</code> <p>If the vehicle is not found</p> <p>Returns:</p> Name Type Description <code>deleted_vehicle_data</code> <code>dict</code> <p>A dictionary with key-value pairs with information on the deleted vehicle</p> Source code in <code>backend\\api\\router.py</code> <pre><code>@router.delete(\"/vehicles/{vehicle_id}\", response_model=VehicleResponse)\ndef delete_vehicle_endpoint(vehicle_id: int, db: Session = Depends(get_db))-&gt;dict:\n    \"\"\"Deletes a vehicle\n\n    Args:\n        vehicle_id (int): The id of the vehicle to be deleted\n        db (Session, optional): Database connection session. Defaults to Depends(get_db).\n\n    Raises:\n        HTTPException: If the vehicle is not found\n\n    Returns:\n        deleted_vehicle_data: A dictionary with key-value pairs with information on the deleted vehicle\n    \"\"\"\n    db_vehicle = delete_vehicle(db, vehicle_id=vehicle_id)\n    if db_vehicle is None:\n        raise HTTPException(status_code=404, detail=\"Vehicle not found\")\n    return db_vehicle\n</code></pre> <ul> <li>preprocess_data_endpoint() </li> </ul> <p>Preprocess the raw data from bronze table</p> <p>Returns:</p> Name Type Description <code>message</code> <p>preprocessed data success/fail</p> Source code in <code>backend\\api\\router.py</code> <pre><code>@router.get(\"/preprocessdata/\")\ndef preprocess_data_endpoint():\n    \"\"\"Preprocess the raw data from bronze table\n\n    Returns:\n        message: preprocessed data success/fail\n    \"\"\"\n    global global_processed_dataframe\n    global_processed_dataframe = preprocess_data()\n    return {'Message': 'Data preprocessed'}\n</code></pre> <ul> <li>load_preprocessed_data_endpoint() </li> </ul> <p>Loads the preprocessed data into the gold table</p> <p>Returns:</p> Name Type Description <code>message</code> <p>data loaded success/fail</p> Source code in <code>backend\\api\\router.py</code> <pre><code>@router.get(\"/load_preprocessed_dataset\")\ndef load_preprocessed_data_endpoint():\n    \"\"\"Loads the preprocessed data into the gold table\n\n    Returns:\n        message: data loaded success/fail\n    \"\"\"\n    global global_processed_dataframe\n    load_preprocessed_vehicle_dataset_into_database(global_processed_dataframe)\n    return {'Message': 'Preprocessed data loaded into database'}\n</code></pre> <ul> <li>train_model_endpoint() </li> </ul> <p>Trains the model and creates a pkl file</p> <p>Returns:</p> Name Type Description <code>message</code> <p>model trained success/fail</p> Source code in <code>backend\\api\\router.py</code> <pre><code>@router.get(\"/train_model/\")\ndef train_model_endpoint():\n    \"\"\"Trains the model and creates a pkl file\n\n    Returns:\n        message: model trained success/fail\n    \"\"\"\n    train_model_and_create_file()\n    return {'Message': 'Model trained'}\n</code></pre> <ul> <li>load_model_endpoint() </li> </ul> <p>Loads the model from the pkl file</p> <p>Returns:</p> Name Type Description <code>message</code> <p>model loaded success/fail</p> Source code in <code>backend\\api\\router.py</code> <pre><code>@router.get(\"/load_model/\")\ndef load_model_endpoint():\n    \"\"\"Loads the model from the pkl file\n\n    Returns:\n        message: model loaded success/fail\n    \"\"\"\n    load_model()\n    return {'Message': 'Model loaded'}\n</code></pre> <ul> <li>predict_price_endpoint() </li> </ul> <p>Predicts the price of a vehicle</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[InputData]</code> <p>The data to be used for the prediction according to the InputData schema</p> required <p>Returns:</p> Name Type Description <code>price_prediction</code> <code>dict</code> <p>The predicted price</p> Source code in <code>backend\\api\\router.py</code> <pre><code>@router.post(\"/predict_price/\")\ndef predict_price_endpoint(data:List[InputData])-&gt;dict:\n    \"\"\"Predicts the price of a vehicle\n\n    Args:\n        data (List[InputData]): The data to be used for the prediction according to the InputData schema\n\n    Returns:\n        price_prediction: The predicted price\n    \"\"\"\n    result = predict_price(data)\n    return {'Message': 'Price predicted', **result}\n</code></pre>"},{"location":"#crud-functions","title":"CRUD Functions","text":"<ul> <li>create_vehicle() </li> </ul> <p>Creates a new vehicle on the database</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>Database connection session</p> required <code>vehicle</code> <code>VehicleCreate</code> <p>Vehicle data matching the VehicleCreate schema</p> required <p>Returns:</p> Name Type Description <code>new_vehicle_data</code> <code>dict</code> <p>Created Vehicle information</p> Source code in <code>backend\\crud\\controller.py</code> <pre><code>def create_vehicle(db: Session, vehicle: VehicleCreate)-&gt;dict:\n    \"\"\"Creates a new vehicle on the database\n\n    Args:\n        db (Session): Database connection session\n        vehicle (VehicleCreate): Vehicle data matching the VehicleCreate schema\n\n    Returns:\n        new_vehicle_data: Created Vehicle information\n    \"\"\"\n    db_vehicle = VehicleModel(**vehicle.model_dump())\n    db.add(db_vehicle)\n    db.commit()\n    db.refresh(db_vehicle)\n    return db_vehicle\n</code></pre> <ul> <li>get_vehicle() </li> </ul> <p>Reads a vehicle from the database</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>Database connection session</p> required <code>vehicle_id</code> <code>int</code> <p>The id of the vehicle to be retrieved</p> required <p>Returns:</p> Name Type Description <code>vehicle_data</code> <code>dict</code> <p>Information for selected vehicle with the given id</p> Source code in <code>backend\\crud\\controller.py</code> <pre><code>def get_vehicle(db: Session, vehicle_id: int)-&gt;dict:\n    \"\"\"Reads a vehicle from the database\n\n    Args:\n        db (Session): Database connection session\n        vehicle_id (int): The id of the vehicle to be retrieved\n\n    Returns:\n        vehicle_data: Information for selected vehicle with the given id\n    \"\"\"\n    return db.query(VehicleModel).filter(VehicleModel.id == vehicle_id).first()\n</code></pre> <ul> <li>get_vehicles() </li> </ul> <p>Reads all vehicles on the database</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>Database connection session</p> required <code>skip</code> <code>int</code> <p>Pagination setup parameter. Defaults to 0.</p> <code>0</code> <code>limit</code> <code>int</code> <p>limits number of vehicles per page. Defaults to 100.</p> <code>100</code> <p>Returns:</p> Name Type Description <code>vehicles_data</code> <code>list[dict[str, Any]]</code> <p>the full list of dictionaries with vehicles from the database</p> Source code in <code>backend\\crud\\controller.py</code> <pre><code>def get_vehicles(db: Session, skip: int = 0, limit: int = 100)-&gt;list[dict[str,Any]]:\n    \"\"\"Reads all vehicles on the database\n\n    Args:\n        db (Session): Database connection session\n        skip (int, optional): Pagination setup parameter. Defaults to 0.\n        limit (int, optional): limits number of vehicles per page. Defaults to 100.\n\n    Returns:\n        vehicles_data: the full list of dictionaries with vehicles from the database\n    \"\"\"\n    return db.query(VehicleModel).offset(skip).limit(limit).all()\n</code></pre> <ul> <li>update_vehicle() </li> </ul> <p>Updates information of a vehicle in the database</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>Database connection session</p> required <code>vehicle_id</code> <code>int</code> <p>The id of the vehicle to be updated</p> required <code>vehicle</code> <code>VehicleUpdate</code> <p>Vehicle data matching the VehicleUpdate schema</p> required <p>Returns:</p> Name Type Description <code>updated_vehicle_data</code> <code>dict</code> <p>Updated vehicle information</p> Source code in <code>backend\\crud\\controller.py</code> <pre><code>def update_vehicle(db: Session, vehicle_id: int, vehicle: VehicleUpdate)-&gt;dict:\n    \"\"\"Updates information of a vehicle in the database\n\n    Args:\n        db (Session): Database connection session\n        vehicle_id (int): The id of the vehicle to be updated\n        vehicle (VehicleUpdate): Vehicle data matching the VehicleUpdate schema\n\n    Returns:\n        updated_vehicle_data: Updated vehicle information\n    \"\"\"\n    db_vehicle = db.query(VehicleModel).filter(VehicleModel.id == vehicle_id).first()\n\n    if db_vehicle is None:\n        return None   \n    if vehicle.datecrawled is not None:\n        db_vehicle.datecrawled = vehicle.datecrawled\n    if vehicle.price is not None:\n        db_vehicle.price = vehicle.price\n    if vehicle.vehicletype is not None:\n        db_vehicle.vehicletype = vehicle.vehicletype \n    if vehicle.gearbox is not None:\n        db_vehicle.gearbox = vehicle.gearbox\n    if vehicle.power is not None:\n        db_vehicle.power = vehicle.power\n    if vehicle.model is not None:\n        db_vehicle.model = vehicle.model\n    if vehicle.mileage is not None:\n        db_vehicle.mileage = vehicle.mileage\n    if vehicle.registrationmonth is not None:\n        db_vehicle.registrationmonth = vehicle.registrationmonth\n    if vehicle.registrationyear is not None:\n        db_vehicle.registrationyear = vehicle.registrationyear\n    if vehicle.fueltype is not None:\n        db_vehicle.fueltype = vehicle.fueltype\n    if vehicle.brand is not None:\n        db_vehicle.brand = vehicle.brand\n    if vehicle.repaired is not None:\n        db_vehicle.repaired = vehicle.repaired\n    if vehicle.datecreated is not None:\n        db_vehicle.datecreated = vehicle.datecreated\n    if vehicle.numberofpictures is not None:\n        db_vehicle.numberofpictures = vehicle.numberofpictures\n    if vehicle.postalcode is not None:\n        db_vehicle.postalcode = vehicle.postalcode\n    if vehicle.lastseen is not None:\n        db_vehicle.lastseen = vehicle.lastseen   \n    db.commit()\n    return db_vehicle\n</code></pre> <ul> <li>delete_vehicle() </li> </ul> <p>Removes a vehicle from the database</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>Database connection session</p> required <code>vehicle_id</code> <code>int</code> <p>The id of the vehicle to be deleted</p> required <p>Returns:</p> Name Type Description <code>delete_vehicle_data</code> <code>dict</code> <p>Information for the Deleted vehicle</p> Source code in <code>backend\\crud\\controller.py</code> <pre><code>def delete_vehicle(db: Session, vehicle_id: int)-&gt;dict:\n    \"\"\"Removes a vehicle from the database\n\n    Args:\n        db (Session): Database connection session\n        vehicle_id (int): The id of the vehicle to be deleted\n\n    Returns:\n        delete_vehicle_data: Information for the Deleted vehicle\n    \"\"\"\n    db_vehicle = db.query(VehicleModel).filter(VehicleModel.id == vehicle_id).first()\n    db.delete(db_vehicle)\n    db.commit()\n    return db_vehicle\n</code></pre> <ul> <li>VehicleModel </li> </ul> <p>               Bases: <code>Base</code></p> <p>Creates a table on the database for the vehicles</p> <p>Parameters:</p> Name Type Description Default <code>Base</code> <code>class</code> <p>Inherits declarative base class parameter from database.py</p> required Source code in <code>backend\\crud\\models.py</code> <pre><code>class VehicleModel(Base):\n    \"\"\"Creates a table on the database for the vehicles\n\n    Args:\n        Base (class): Inherits declarative base class parameter from database.py\n    \"\"\"\n    __tablename__ = \"bronze_car_data\"\n    id = Column(Integer, primary_key=True, index=True)\n    datecrawled = (Column(DateTime))\n    price = Column(Integer)\n    vehicletype = Column(String)\n    gearbox = Column(String)\n    power = Column(Integer)\n    model = Column(String)\n    mileage = Column(Integer)\n    registrationmonth = Column(Integer) \n    registrationyear = Column(Integer)\n    fueltype = Column(String)\n    brand = Column(String)\n    notrepaired = Column(String)\n    datecreated = Column(DateTime)\n    numberofpictures = Column(Integer)\n    postalcode = Column(Integer)\n    lastseen = Column(DateTime)\n</code></pre> <ul> <li>GearboxBase </li> </ul> <p>               Bases: <code>Enum</code></p> <p>List of gearbox types for the vehicles</p> <p>Parameters:</p> Name Type Description Default <code>selected_gearbox</code> <code>Enum</code> <p>Gearbox types</p> required Source code in <code>backend\\crud\\schemas.py</code> <pre><code>class GearboxBase(Enum):\n    \"\"\"List of gearbox types for the vehicles\n\n    Args:\n        selected_gearbox (Enum): Gearbox types\n    \"\"\"\n    gearbox0 = None\n    gearbox1 = \"manual\"\n    gearbox2 = \"auto\"\n    gearbox3 = \"semi-automatic\"\n</code></pre> <ul> <li>FueltypeBase </li> </ul> <p>               Bases: <code>Enum</code></p> <p>List of fuel types for the vehicles</p> <p>Parameters:</p> Name Type Description Default <code>selected_fuel_type</code> <code>Enum</code> <p>Vehicle Fuel types</p> required Source code in <code>backend\\crud\\schemas.py</code> <pre><code>class FueltypeBase(Enum):\n    \"\"\"List of fuel types for the vehicles\n\n    Args:\n        selected_fuel_type (Enum): Vehicle Fuel types\n    \"\"\"\n    fueltype0 = None\n    fueltype1 = \"gasoline\"\n    fueltype2 = \"diesel\"\n    fueltype3 = \"electric\"\n    fueltype4 = \"hybrid\"\n    fueltype5 = \"petrol\"\n    fueltype6 = \"other\"\n    fueltype7 = \"lpg\"\n    fueltype8 = \"cng\"\n</code></pre> <ul> <li>VehicleTypeBase </li> </ul> <p>               Bases: <code>Enum</code></p> <p>List of vehicle types for the vehicles</p> <p>Parameters:</p> Name Type Description Default <code>selected_vehicle_type</code> <code>Enum</code> <p>Vehicle types</p> required Source code in <code>backend\\crud\\schemas.py</code> <pre><code>class VehicleTypeBase(Enum):\n    \"\"\"List of vehicle types for the vehicles\n\n    Args:\n        selected_vehicle_type (Enum): Vehicle types\n    \"\"\"\n    vehicletype0 = None\n    vehicletype1 = \"bus\"\n    vehicletype2 = \"convertible\"\n    vehicletype3 = \"coupe\"\n    vehicletype4 = \"other\"\n    vehicletype5 = \"sedan\"\n    vehicletype6 = \"small\"\n    vehicletype7 = \"suv\"\n    vehicletype8 = \"wagon\"\n</code></pre> <ul> <li>VehicleBase </li> </ul> <p>               Bases: <code>BaseModel</code></p> <p>Base schema for the vehicle data</p> <p>Parameters:</p> Name Type Description Default <code>BaseModel</code> <code>class</code> <p>Inherit Pydantic's BaseModel class</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>wrong selection of Gearbox</p> <code>ValueError</code> <p>wrong selection of Fueltype</p> <code>ValueError</code> <p>wrong selection of Vehicle type</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>vehicle data according to the schema</p> Source code in <code>backend\\crud\\schemas.py</code> <pre><code>class VehicleBase(BaseModel):\n    \"\"\"Base schema for the vehicle data\n\n    Args:\n        BaseModel (class): Inherit Pydantic's BaseModel class\n\n    Raises:\n        ValueError: wrong selection of Gearbox\n        ValueError: wrong selection of Fueltype\n        ValueError: wrong selection of Vehicle type\n\n    Returns:\n        dict: vehicle data according to the schema\n    \"\"\"\n    datecrawled: Optional[datetime]\n    price: Optional[int]\n    vehicletype: Optional[str]\n    gearbox: Optional[str]\n    power: Optional[int]\n    model: Optional[str]\n    mileage: Optional[int]\n    registrationmonth: Optional[int]\n    registrationyear: Optional[int]\n    fueltype: Optional[str]\n    brand: Optional[str]\n    notrepaired: Optional[str]\n    datecreated: Optional[datetime]\n    numberofpictures: Optional[int]\n    postalcode: Optional[int]\n    lastseen: Optional[datetime]\n\n    @validator(\"gearbox\")\n    def check_gearbox(cls, v):\n        \"\"\"Validates the gearbox selection\n\n        Args:\n            v (str): Gearbox selection\n\n        Raises:\n            ValueError: Invalid Gearbox selection\n\n        Returns:\n            str: Gearbox selection\n        \"\"\"\n        if v in [item.value for item in GearboxBase]:\n            return v\n        raise ValueError(\"Invalid Gearbox selection\")\n\n    @validator(\"fueltype\")\n    def check_fueltype(cls, v):\n        \"\"\"Validates the fuel type selection\n\n        Args:\n            v (str): Fuel type selection\n\n        Raises:\n            ValueError: Invalid fuel type selection\n\n        Returns:\n            str: Fuel type selection\n        \"\"\"\n        if v in [item.value for item in FueltypeBase]:\n            return v\n        raise ValueError(\"Invalid fuel type selection\")\n\n    @validator(\"vehicletype\")\n    def check_vehicle(cls, v):\n        \"\"\"Validates the vehicle type selection\n\n        Args:\n            v (str): Vehicle type selection\n\n        Raises:\n            ValueError: Invalid vehicle type selection\n\n        Returns:\n            str: Vehicle type selection\n        \"\"\"\n        if v in [item.value for item in VehicleTypeBase]:\n            return v\n        raise ValueError(\"Invalid vehicle type selection\")\n</code></pre> <ul> <li>VehicleCreate </li> </ul> <p>               Bases: <code>VehicleBase</code></p> <p>Schema for creating a new vehicle</p> <p>Parameters:</p> Name Type Description Default <code>VehicleBase</code> <code>class</code> <p>Inherits the VehicleBase class</p> required Source code in <code>backend\\crud\\schemas.py</code> <pre><code>class VehicleCreate(VehicleBase):\n    \"\"\"Schema for creating a new vehicle\n\n    Args:\n        VehicleBase (class): Inherits the VehicleBase class\n    \"\"\"\n    pass\n</code></pre> <ul> <li>VehicleResponse </li> </ul> <p>               Bases: <code>VehicleBase</code></p> <p>Schema for the vehicle response</p> <p>Parameters:</p> Name Type Description Default <code>VehicleBase</code> <code>class</code> <p>Inherits the VehicleBase class</p> required Source code in <code>backend\\crud\\schemas.py</code> <pre><code>class VehicleResponse(VehicleBase):\n    \"\"\"Schema for the vehicle response\n\n    Args:\n        VehicleBase (class): Inherits the VehicleBase class\n    \"\"\"\n    id: int\n\n    class Config:\n        \"\"\"ORM Mode configuration for the schema\"\"\"\n        orm_mode = True\n</code></pre> <ul> <li>VehicleUpdate </li> </ul> <p>               Bases: <code>BaseModel</code></p> <p>Schema for updating the vehicle data</p> <p>Parameters:</p> Name Type Description Default <code>BaseModel</code> <code>class</code> <p>Inherits the Pydantic BaseModel class</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>wrong selection of Gearbox</p> <code>ValueError</code> <p>wrong selection of Fueltype</p> <code>ValueError</code> <p>wrong selection of Vehicle type</p> <p>Returns:</p> Name Type Description <code>_type_</code> <p>Updated vehicle data according to the schema</p> Source code in <code>backend\\crud\\schemas.py</code> <pre><code>class VehicleUpdate(BaseModel):\n    \"\"\"Schema for updating the vehicle data\n\n    Args:\n        BaseModel (class): Inherits the Pydantic BaseModel class\n\n    Raises:\n        ValueError: wrong selection of Gearbox\n        ValueError: wrong selection of Fueltype\n        ValueError: wrong selection of Vehicle type\n\n    Returns:\n        _type_: Updated vehicle data according to the schema\n    \"\"\"\n    datecrawled: Optional[datetime] = None\n    price: Optional[PositiveFloat] = None\n    vehicletype: Optional[str] = None\n    gearbox: Optional[str] = None\n    power: Optional[int] = None\n    model: Optional[str] = None\n    mileage: Optional[int] = None\n    registrationmonth: Optional[int] = None\n    registrationyear: Optional[int] = None\n    fueltype: Optional[str] = None\n    brand: Optional[str] = None\n    repaired: Optional[bool] = None\n    datecreated: Optional[datetime] = None\n    numberofpictures: Optional[int] = None\n    postalcode: Optional[int] = None\n    lastseen: Optional[datetime] = None\n\n    @validator(\"gearbox\", pre=True, always=True)\n    def check_gearbox(cls, v):\n        \"\"\"Validates the gearbox selection\n\n        Args:\n            v (str): Gearbox selection\n\n        Raises:\n            ValueError: Invalid Gearbox selection\n\n        Returns:\n            str: Gearbox selection\n        \"\"\"\n        if v is None:\n            return v\n        if v in [item.value for item in GearboxBase]:\n            return v\n        raise ValueError(\"Invalid Gearbox selection\")\n\n    @validator(\"fueltype\", pre=True, always=True)\n    def check_fueltype(cls, v):\n        \"\"\"Validates the fuel type selection\n\n        Args:\n            v (str): Fuel type selection\n\n        Raises:\n            ValueError: Invalid fuel type selection\n\n        Returns:\n            str: Fuel type selection\n        \"\"\"\n        if v is None:\n            return v\n        if v in [item.value for item in FueltypeBase]:\n            return v\n        raise ValueError(\"Invalid fuel type selection\")\n\n    @validator(\"vehicletype\", pre=True, always=True)\n    def check_vehicletype(cls, v):\n        \"\"\"Validates the vehicle type selection\n\n        Args:\n            v (str): Vehicle type selection\n\n        Raises:\n            ValueError: Invalid vehicle type selection\n\n        Returns:\n            str: Vehicle type selection\n        \"\"\"\n        if v is None:\n            return v\n        if v in [item.value for item in VehicleTypeBase]:\n            return v\n        raise ValueError(\"Invalid vehicle type selection\")\n</code></pre> <ul> <li>InputData </li> </ul> <p>               Bases: <code>BaseModel</code></p> <p>Schema for the input data when predicting vehicle prices</p> <p>Parameters:</p> Name Type Description Default <code>BaseModel</code> <code>class</code> <p>Inherits the Pydantic BaseModel class</p> required Source code in <code>backend\\crud\\schemas.py</code> <pre><code>class InputData(BaseModel):\n    \"\"\"Schema for the input data when predicting vehicle prices\n\n    Args:\n        BaseModel (class): Inherits the Pydantic BaseModel class\n    \"\"\"\n    datecrawled: Optional[datetime] = None\n    vehicletype:Optional[str] = None\n    gearbox: Optional[str] = None\n    power: Optional[int] = None\n    model: Optional[str] = None\n    mileage: Optional[int] = None\n    registrationmonth: Optional[int] = None\n    registrationyear: Optional[int] = None\n    fueltype: Optional[str] = None\n    brand: Optional[str] = None\n    notrepaired: Optional[str] = None\n    datecreated: Optional[datetime] = None\n    numberofpictures: Optional[int] = None\n    postalcode: Optional[int] = None\n    lastseen: Optional[datetime] = None\n</code></pre>"},{"location":"#backend.crud.schemas.VehicleBase.check_fueltype","title":"<code>check_fueltype(v)</code>","text":"<p>Validates the fuel type selection</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>str</code> <p>Fuel type selection</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>Invalid fuel type selection</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Fuel type selection</p> Source code in <code>backend\\crud\\schemas.py</code> <pre><code>@validator(\"fueltype\")\ndef check_fueltype(cls, v):\n    \"\"\"Validates the fuel type selection\n\n    Args:\n        v (str): Fuel type selection\n\n    Raises:\n        ValueError: Invalid fuel type selection\n\n    Returns:\n        str: Fuel type selection\n    \"\"\"\n    if v in [item.value for item in FueltypeBase]:\n        return v\n    raise ValueError(\"Invalid fuel type selection\")\n</code></pre>"},{"location":"#backend.crud.schemas.VehicleBase.check_gearbox","title":"<code>check_gearbox(v)</code>","text":"<p>Validates the gearbox selection</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>str</code> <p>Gearbox selection</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>Invalid Gearbox selection</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Gearbox selection</p> Source code in <code>backend\\crud\\schemas.py</code> <pre><code>@validator(\"gearbox\")\ndef check_gearbox(cls, v):\n    \"\"\"Validates the gearbox selection\n\n    Args:\n        v (str): Gearbox selection\n\n    Raises:\n        ValueError: Invalid Gearbox selection\n\n    Returns:\n        str: Gearbox selection\n    \"\"\"\n    if v in [item.value for item in GearboxBase]:\n        return v\n    raise ValueError(\"Invalid Gearbox selection\")\n</code></pre>"},{"location":"#backend.crud.schemas.VehicleBase.check_vehicle","title":"<code>check_vehicle(v)</code>","text":"<p>Validates the vehicle type selection</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>str</code> <p>Vehicle type selection</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>Invalid vehicle type selection</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Vehicle type selection</p> Source code in <code>backend\\crud\\schemas.py</code> <pre><code>@validator(\"vehicletype\")\ndef check_vehicle(cls, v):\n    \"\"\"Validates the vehicle type selection\n\n    Args:\n        v (str): Vehicle type selection\n\n    Raises:\n        ValueError: Invalid vehicle type selection\n\n    Returns:\n        str: Vehicle type selection\n    \"\"\"\n    if v in [item.value for item in VehicleTypeBase]:\n        return v\n    raise ValueError(\"Invalid vehicle type selection\")\n</code></pre>"},{"location":"#backend.crud.schemas.VehicleResponse.Config","title":"<code>Config</code>","text":"<p>ORM Mode configuration for the schema</p> Source code in <code>backend\\crud\\schemas.py</code> <pre><code>class Config:\n    \"\"\"ORM Mode configuration for the schema\"\"\"\n    orm_mode = True\n</code></pre>"},{"location":"#backend.crud.schemas.VehicleUpdate.check_fueltype","title":"<code>check_fueltype(v)</code>","text":"<p>Validates the fuel type selection</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>str</code> <p>Fuel type selection</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>Invalid fuel type selection</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Fuel type selection</p> Source code in <code>backend\\crud\\schemas.py</code> <pre><code>@validator(\"fueltype\", pre=True, always=True)\ndef check_fueltype(cls, v):\n    \"\"\"Validates the fuel type selection\n\n    Args:\n        v (str): Fuel type selection\n\n    Raises:\n        ValueError: Invalid fuel type selection\n\n    Returns:\n        str: Fuel type selection\n    \"\"\"\n    if v is None:\n        return v\n    if v in [item.value for item in FueltypeBase]:\n        return v\n    raise ValueError(\"Invalid fuel type selection\")\n</code></pre>"},{"location":"#backend.crud.schemas.VehicleUpdate.check_gearbox","title":"<code>check_gearbox(v)</code>","text":"<p>Validates the gearbox selection</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>str</code> <p>Gearbox selection</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>Invalid Gearbox selection</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Gearbox selection</p> Source code in <code>backend\\crud\\schemas.py</code> <pre><code>@validator(\"gearbox\", pre=True, always=True)\ndef check_gearbox(cls, v):\n    \"\"\"Validates the gearbox selection\n\n    Args:\n        v (str): Gearbox selection\n\n    Raises:\n        ValueError: Invalid Gearbox selection\n\n    Returns:\n        str: Gearbox selection\n    \"\"\"\n    if v is None:\n        return v\n    if v in [item.value for item in GearboxBase]:\n        return v\n    raise ValueError(\"Invalid Gearbox selection\")\n</code></pre>"},{"location":"#backend.crud.schemas.VehicleUpdate.check_vehicletype","title":"<code>check_vehicletype(v)</code>","text":"<p>Validates the vehicle type selection</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>str</code> <p>Vehicle type selection</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>Invalid vehicle type selection</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Vehicle type selection</p> Source code in <code>backend\\crud\\schemas.py</code> <pre><code>@validator(\"vehicletype\", pre=True, always=True)\ndef check_vehicletype(cls, v):\n    \"\"\"Validates the vehicle type selection\n\n    Args:\n        v (str): Vehicle type selection\n\n    Raises:\n        ValueError: Invalid vehicle type selection\n\n    Returns:\n        str: Vehicle type selection\n    \"\"\"\n    if v is None:\n        return v\n    if v in [item.value for item in VehicleTypeBase]:\n        return v\n    raise ValueError(\"Invalid vehicle type selection\")\n</code></pre>"},{"location":"#elt-functions","title":"ELT Functions","text":"<ul> <li>preprocess_data() </li> </ul> <p>Preprocesses the raw data from bronze_car_data table using the pipeline_dataset</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Raw data could not be preprocessed</p> <p>Returns:</p> Name Type Description <code>car_dataset</code> <code>DataFrame</code> <p>Preprocessed dataset</p> Source code in <code>backend\\ELT.py</code> <pre><code>def preprocess_data()-&gt; pd.DataFrame:\n    \"\"\"Preprocesses the raw data from bronze_car_data table using the pipeline_dataset\n\n    Raises:\n        HTTPException: Raw data could not be preprocessed\n\n    Returns:\n        car_dataset: Preprocessed dataset\n    \"\"\"\n    try:\n        query = 'SELECT * FROM bronze_car_data'\n        data_df = pd.read_sql(query,engine)\n        processed_df = pipeline_dataset.fit_transform(data_df)\n        logger.info(\"Raw data preprocessed\")\n        return processed_df\n    except Exception as e:\n        logger.error(\"Raw data could not be preprocessed, error: {e}\")\n        raise HTTPException(status_code=500, detail=str(e))\n</code></pre> <ul> <li>load_preprocessed_vehicle_dataset_into_database() </li> </ul> <p>Loads the preprocessed data into the gold_car_data table in the database</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Preprocessed data to be loaded into the database</p> required <p>Raises:</p> Type Description <code>HTTPException</code> <p>Preprocessed data could not be loaded into the database</p> Source code in <code>backend\\ELT.py</code> <pre><code>def load_preprocessed_vehicle_dataset_into_database(df: pd.DataFrame):\n    \"\"\"Loads the preprocessed data into the gold_car_data table in the database\n\n    Args:\n        df (pd.DataFrame): Preprocessed data to be loaded into the database\n\n    Raises:\n        HTTPException: Preprocessed data could not be loaded into the database\n    \"\"\"\n    try:\n        df.to_sql('gold_car_data', con=engine, if_exists='replace', index=False)\n        logger.info(\"Preprocessed data loaded into gold_car_data table!\")\n    except:\n        logger.error(\"Preprocessed data could not be loaded, error: {e}\")\n        raise HTTPException(status_code=500, detail=str(e))\n</code></pre> <ul> <li>train_model_and_create_file() </li> </ul> <p>Trains the model using the gold_car_data table and creates a model.pkl file</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Model could not be trained</p> Source code in <code>backend\\ELT.py</code> <pre><code>def train_model_and_create_file()-&gt; pd.DataFrame:\n    \"\"\"Trains the model using the gold_car_data table and creates a model.pkl file\n\n    Raises:\n        HTTPException: Model could not be trained\n    \"\"\"\n    try:\n        training_query = 'SELECT * FROM gold_car_data'\n        data = pd.read_sql(training_query,engine)\n        X = data.drop(columns=[\"price\"])\n        y = data[\"price\"]\n        X_train,  X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n        model = CatBoostRegressor(depth=7, iterations=50, l2_leaf_reg=0.1, learning_rate=0.5)\n        model.fit(X_train, y_train)\n        prediction = model.predict(X_test)\n        mse = np.sqrt(mean_squared_error(y_test, prediction))\n        print(f\"model MSE: {mse}\")\n        joblib.dump(model, \"model.pkl\")\n        logger.info(\"Model trained and model.pkl file created!\")\n    except Exception as e:\n        logger.error(\"Model could not be trained, error: {e}\")\n        raise HTTPException(status_code=500, detail=str(e))\n</code></pre> <ul> <li>load_model() </li> </ul> <p>Loads the model from the model.pkl file</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Model could not be loaded</p> Source code in <code>backend\\ELT.py</code> <pre><code>def load_model():\n    \"\"\"Loads the model from the model.pkl file\n\n    Raises:\n        HTTPException: Model could not be loaded\n    \"\"\"\n    try:\n        global model\n        model = joblib.load(\"model.pkl\")\n        logger.info(\"Model loaded from model.pkl file!\")\n    except Exception as e:\n        logger.error(\"Model could not be loaded, error: {e}\")\n        raise HTTPException(status_code=500, detail=str(e))\n</code></pre> <ul> <li>predict_price() </li> </ul> <p>Generates a prediction for the price of a vehicle using the model</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[InputData]</code> <p>List of input data for the prediction according to the InputData schema</p> required <p>Raises:</p> Type Description <code>HTTPException</code> <p>Prediction could not be generated</p> <code>HTTPException</code> <p>Model not loaded</p> <p>Returns:</p> Type Description <code>Dict[str, List]</code> <p>Dict[str, List]: Prediction for the price of the vehicle</p> Source code in <code>backend\\ELT.py</code> <pre><code>def predict_price(data:List[InputData])-&gt; Dict[str, List]:\n    \"\"\"Generates a prediction for the price of a vehicle using the model\n\n    Args:\n        data (List[InputData]): List of input data for the prediction according to the InputData schema\n\n    Raises:\n        HTTPException: Prediction could not be generated\n        HTTPException: Model not loaded\n\n    Returns:\n        Dict[str, List]: Prediction for the price of the vehicle\n    \"\"\"\n    if model is None:\n        logger.error(\"Model is 'None', error: {e}\")\n        raise HTTPException(status_code=500, detail=\"Model not loaded\")\n\n    input_data = [[\n        d.datecrawled,\n        d.vehicletype,\n        d.gearbox,\n        d.power,\n        d.model,\n        d.mileage,\n        d.registrationmonth,\n        d.registrationyear,\n        d.fueltype,\n        d.brand,\n        d.notrepaired,\n        d.datecreated,\n        d.numberofpictures,\n        d.postalcode,\n        d.lastseen] for d in data]\n\n    columns = [\n        \"datecrawled\", \"vehicletype\", \"gearbox\", \"power\", \"model\", \n        \"mileage\", \"registrationmonth\", \"registrationyear\", \"fueltype\", \n        \"brand\", \"notrepaired\", \"datecreated\", \"numberofpictures\", \n        \"postalcode\", \"lastseen\"\n    ]\n    try:\n        df = pd.DataFrame(input_data, columns=columns)\n        #datetime_columns = [\"datecrawled\", \"datecreated\", \"lastseen\"]\n        #for col in datetime_columns:\n        #    if col in df.columns:\n        #        df[col] = df[col].astype(str).replace(\"NaT\", None) \n        processed_single_df = pipeline_single.fit_transform(df)\n        logger.info(\"Submitted data ran through preprocessing pipeline\")\n        expected_feature_order = model.feature_names_\n        missing_columns = set(expected_feature_order) - set(processed_single_df.columns)\n        # Add missing columns and fill with 0\n        for col in missing_columns:\n            processed_single_df[col] = 0\n        processed_single_df = processed_single_df[expected_feature_order]\n        prediction = model.predict(processed_single_df)\n        logger.info(\"Prediction has been generated!\")\n    except Exception as e:\n        logger.error(\"Prediction could not be generated, error: {e}\")\n        raise HTTPException(status_code=400, detail=str(e))\n    return {\"Price prediction\": prediction.tolist()}\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python (&gt;=3.11)</li> <li>Docker and Docker Compose</li> </ul>"},{"location":"#installation","title":"Installation","text":"<ol> <li> <p>Clone the Repository:    <pre><code>git clone https://github.com/realdanizilla/Rusty-Bargain-App.git\ncd Rusty-Bargain-App\n</code></pre></p> </li> <li> <p>Set Up Environment Variables:    Create a <code>.env</code> file in the root directory with the following:    <pre><code>POSTGRES_USER=user\nPOSTGRES_PASSWORD=password\nPOSTGRES_DB=rusty_bargain\nLOGFIRE_TOKEN=your_token\n</code></pre></p> </li> <li> <p>Build and Start Docker Containers:    <pre><code>docker-compose up --build\n</code></pre></p> </li> </ol>"},{"location":"#accessing-the-application","title":"Accessing the Application","text":"<ol> <li> <p>Frontend:    Visit <code>http://localhost:8501</code> to interact with the Streamlit app.</p> </li> <li> <p>Backend:    Access API documentation at <code>http://localhost:8000/docs</code>.</p> </li> </ol>"},{"location":"#usage","title":"Usage","text":""},{"location":"#vehicle-database-management","title":"Vehicle Database Management","text":"<ul> <li>Use the Streamlit interface to:</li> <li>View all vehicle records.</li> <li>Add new vehicles.</li> <li>Update or delete existing records.</li> </ul>"},{"location":"#machine-learning-workflow","title":"Machine Learning Workflow","text":"<ul> <li>Train or retrain the model using updated data.</li> <li>Predict vehicle prices based on user-provided features.</li> </ul>"},{"location":"#key-functionalities","title":"Key Functionalities","text":"<ol> <li> <p>Train/Re-train Model:</p> <ul> <li>Accessible from the frontend under \"Train/Re-train Model.\"</li> <li>Processes raw data, loads it into the database, trains the model, and makes it available for predictions.</li> </ul> </li> <li> <p>Price Prediction:</p> <ul> <li>Accessible via a frontend form.</li> <li>Users provide features like vehicle type, mileage, and horsepower, and the app predicts the price.</li> </ul> </li> </ol>"},{"location":"#example-workflow","title":"Example Workflow","text":"<ol> <li> <p>Start the Application:</p> <ul> <li>Run <code>docker-compose up</code> and access the frontend and backend services.</li> </ul> </li> <li> <p>Manage Vehicles:</p> <ul> <li>Add or update vehicle records in the database.</li> <li>Access the database using pgadmin4 @ http://localhost:5050. Set a new connection as follows:<ul> <li>host: <code>host.docker.internal</code></li> <li>port: <code>55432</code></li> <li>username: <code>user</code></li> <li>password: <code>password</code></li> <li>database name: <code>rusty_bargain</code></li> </ul> </li> </ul> </li> <li> <p>Train the ML Model:</p> <ul> <li>Use the \"Train/Re-train Model\" button in the Streamlit app.</li> </ul> </li> <li> <p>Predict Prices:</p> <ul> <li>Enter vehicle details in the \"Predict Price\" form and get an instant price prediction.</li> </ul> </li> </ol>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Follow these steps: 1. Fork the repository. 2. Create a new branch for your feature or bug fix. 3. Submit a pull request with detailed information about your changes.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for more details.</p> <p>This documentation provides a clear and concise overview of the Rusty Bargain App for both users and developers. If you encounter any issues, please open an issue on the GitHub repository. \ud83d\ude80</p>"},{"location":"api/","title":"API","text":"<p>Here is the revised and detailed documentation for the Rusty Bargain App API, including the endpoints for CRUD operations.</p>"},{"location":"api/#rusty-bargain-app-api-documentation","title":"Rusty Bargain App API Documentation","text":""},{"location":"api/#overview","title":"Overview","text":"<p>The Rusty Bargain App provides a comprehensive RESTful API for managing vehicle data and running machine learning workflows for price prediction. The API is built using FastAPI and provides endpoints for:</p> <ul> <li>CRUD operations: Manage vehicle records.</li> <li>Data preprocessing: Prepare data for analysis and modeling.</li> <li>Machine learning workflows: Train, retrain, and predict vehicle prices.</li> </ul> <p>You can explore and test all API endpoints using the interactive documentation at http://localhost:8000/docs.</p>"},{"location":"api/#api-endpoints","title":"API Endpoints","text":""},{"location":"api/#crud-operations","title":"CRUD Operations","text":""},{"location":"api/#1-get-all-vehicles","title":"1. Get All Vehicles","text":"<ul> <li>Endpoint: <code>/vehicles/</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieve a list of all vehicle records.</li> <li>Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Body: A list of vehicle objects. <pre><code>[\n  {\n    \"id\": 1,\n    \"datecrawled\": \"2025-01-02T00:04:26.076Z\",\n    \"price\": 3500,\n    \"vehicletype\": \"sedan\",\n    \"gearbox\": \"manual\",\n    ...\n  }\n]\n</code></pre></li> </ul> </li> </ul>"},{"location":"api/#2-get-a-single-vehicle","title":"2. Get a Single Vehicle","text":"<ul> <li>Endpoint: <code>/vehicles/{vehicle_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieve details of a specific vehicle by its ID.</li> <li>Path Parameter:<ul> <li><code>vehicle_id</code> (integer): The ID of the vehicle to retrieve.</li> </ul> </li> <li>Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Body: A single vehicle object.</li> </ul> </li> </ul>"},{"location":"api/#3-add-a-new-vehicle","title":"3. Add a New Vehicle","text":"<ul> <li>Endpoint: <code>/vehicles/</code></li> <li>Method: <code>POST</code></li> <li>Description: Add a new vehicle record to the database.</li> <li>Request Body:<ul> <li>JSON object representing the vehicle details.   <pre><code>{\n  \"datecrawled\": \"2025-01-02T00:04:26.076Z\",\n  \"price\": 4500,\n  \"vehicletype\": \"SUV\",\n  ...\n}\n</code></pre></li> </ul> </li> <li>Response:<ul> <li>Status Code: <code>201 Created</code></li> <li>Body: The created vehicle object.</li> </ul> </li> </ul>"},{"location":"api/#4-update-a-vehicle","title":"4. Update a Vehicle","text":"<ul> <li>Endpoint: <code>/vehicles/{vehicle_id}</code></li> <li>Method: <code>PUT</code></li> <li>Description: Update details of an existing vehicle.</li> <li>Path Parameter:<ul> <li><code>vehicle_id</code> (integer): The ID of the vehicle to update.</li> </ul> </li> <li>Request Body:<ul> <li>JSON object with the updated vehicle details.   <pre><code>{\n  \"price\": 4800,\n  \"vehicletype\": \"sedan\",\n  ...\n}\n</code></pre></li> </ul> </li> <li>Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Body: The updated vehicle object.</li> </ul> </li> </ul>"},{"location":"api/#5-delete-a-vehicle","title":"5. Delete a Vehicle","text":"<ul> <li>Endpoint: <code>/vehicles/{vehicle_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Remove a vehicle record from the database.</li> <li>Path Parameter:<ul> <li><code>vehicle_id</code> (integer): The ID of the vehicle to delete.</li> </ul> </li> <li>Response:<ul> <li>Status Code: <code>200 OK</code></li> </ul> </li> </ul>"},{"location":"api/#data-preprocessing","title":"Data Preprocessing","text":""},{"location":"api/#preprocess-data","title":"Preprocess Data","text":"<ul> <li>Endpoint: <code>/preprocessdata</code></li> <li>Method: <code>GET</code></li> <li>Description: Preprocess raw vehicle data to prepare it for analysis.</li> <li>Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Body:   <pre><code>{\n  \"Message\": \"Data preprocessed successfully\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"api/#machine-learning-workflows","title":"Machine Learning Workflows","text":""},{"location":"api/#1-train-model","title":"1. Train Model","text":"<ul> <li>Endpoint: <code>/train_model</code></li> <li>Method: <code>GET</code></li> <li>Description: Train a machine learning model using preprocessed data.</li> <li>Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Body:   <pre><code>{\n  \"Message\": \"Model trained successfully\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"api/#2-load-model","title":"2. Load Model","text":"<ul> <li>Endpoint: <code>/load_model</code></li> <li>Method: <code>GET</code></li> <li>Description: Load the trained machine learning model for use.</li> <li>Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Body:   <pre><code>{\n  \"Message\": \"Model loaded successfully\"\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"api/#3-predict-price","title":"3. Predict Price","text":"<ul> <li>Endpoint: <code>/predict_price/</code></li> <li>Method: <code>POST</code></li> <li>Description: Predict vehicle prices based on the provided input features.</li> <li>Request Body:<ul> <li>A list of JSON objects, each representing a vehicle's features.   <pre><code>[\n  {\n    \"datecrawled\": \"2025-01-02T00:04:26.076Z\",\n    \"vehicletype\": \"SUV\",\n    \"gearbox\": \"automatic\",\n    ...\n  }\n]\n</code></pre></li> </ul> </li> <li>Response:<ul> <li>Status Code: <code>200 OK</code></li> <li>Body:   <pre><code>{\n  \"Message\": \"Price predicted\",\n  \"Price prediction\": [3561.33, 4200.50]\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"api/#interactive-api-documentation","title":"Interactive API Documentation","text":"<p>You can test and explore the API endpoints using the Swagger-based interactive documentation available at: - URL: http://localhost:8000/docs</p>"},{"location":"api/#features","title":"Features:","text":"<ul> <li>Explore Endpoints: View all available API routes and their details.</li> <li>Test APIs: Send requests directly from your browser.</li> <li>View Schemas: Understand the structure of request and response bodies.</li> </ul>"},{"location":"api/#error-handling","title":"Error Handling","text":"<ul> <li>400 Bad Request: Invalid input or missing fields.</li> <li>404 Not Found: Resource not found (e.g., invalid <code>vehicle_id</code>).</li> <li>500 Internal Server Error: Unexpected server-side error.</li> </ul>"},{"location":"api/#security","title":"Security","text":"<p>Currently, the API does not include authentication. Before deploying to production, consider implementing security mechanisms such as API keys or OAuth.</p> <p>This documentation provides a detailed overview of the Rusty Bargain App API. For more information, refer to the source code or test the endpoints using the interactive documentation. \ud83d\ude80</p>"}]}